class pymysql.connections.Connection(host=None, user=None, password='', database=None, port=0, unix_socket=None, charset='', sql_mode=None, read_default_file=None, conv=None, use_unicode=None, client_flag=0, cursorclass=<class 'pymysql.cursors.Cursor'>, init_command=None, connect_timeout=10, ssl=None, read_default_group=None, compress=None, named_pipe=None, autocommit=False, db=None, passwd=None, local_infile=False, max_allowed_packet=16777216, defer_connect=False, auth_plugin_map=None, read_timeout=None, write_timeout=None, bind_address=None, binary_prefix=False, program_name=None, server_public_key=None)

用mysql服务器表示套接字。

获取此类实例的正确方法是调用connect（）。

建立与MySQL数据库的连接。接受几个论点：

参数：	
host - 数据库服务器所在的主机
user - 以登录身份登录的用户名
password - 要使用的密码。
database - 要使用的数据库，None不使用特定的数据库。
port - 要使用的MySQL端口，默认通常都可以。（默认值：3306）
bind_address - 当客户端具有多个网络接口时，请指定从中连接到主机的接口。参数可以是主机名或IP地址。
unix_socket - 您可以选择使用unix套接字而不是TCP / IP。
read_timeout - 以秒为单位读取连接的超时（默认值：无 - 无超时）
write_timeout - 以秒为单位写入连接的超时（默认值：无 - 无超时）
charset - 你要使用的Charset。
sql_mode - 要使用的默认SQL_MODE。
read_default_file - 指定my.cnf文件以从[client]部分下读取这些参数。
conv - 使用转换字典而不是默认字典。这用于提供类型的自定义编组和解组。见转换器。
use_unicode - 是否默认为unicode字符串。对于Py3k，此选项默认为true。
client_flag - 要发送给MySQL的自定义标志。在constants.CLIENT中查找潜在值。
cursorclass - 要使用的自定义游标类。
init_command - 建立连接时要运行的初始SQL语句。
connect_timeout - 连接时抛出异常之前的超时。（默认值：10，最小值：1，最大值：31536000）
ssl - 类似于mysql_ssl_set（）参数的参数的dict。
read_default_group - 要在配置文件中读取的组。
compress - 不支持
named_pipe - 不支持
autocommit - 自动提交模式。无表示使用服务器默认值。（默认值：False）
local_infile - 允许使用LOAD DATA LOCAL命令的布尔值。（默认值：False）
max_allowed_pa​​cket - 发送到服务器的最大数据包大小（以字节为单位）。（默认值：16MB）仅用于限制小于默认值（16KB）的“LOAD LOCAL INFILE”数据包的大小。
defer_connect - 不要明确连接contruction - 等待连接调用。（默认值：False）
auth_plugin_map - 插件名称的一个字典，用于处理该插件的类。该类将Connection对象作为构造函数的参数。该类需要一个认证方法，将认证包作为参数。对于对话框插件，可以使用提示（echo，prompt）方法（如果没有authenticate方法）从用户返回字符串。（实验）
server_public_key - SHA256 authenticnticaiton插件公钥值。（默认：无）
db - 数据库的别名。（与MySQLdb兼容）
passwd - 密码的别名。（与MySQLdb兼容）
binary_prefix - 在字节和bytearray上添加_binary前缀。（默认值：False）

begin（）
开始交易。

close（）
发送退出消息并关闭套接字。

请参阅 规范中的Connection.close（）。

举：	错误 - 如果连接已关闭。
commit（）
提交对稳定存储的更改。

请参阅 规范中的Connection.commit（）。

cursor（cursor = None ）
创建一个新游标以执行查询。

参数：	cursor - 要创建的游标类型; 之一Cursor， SSCursor，DictCursor，或SSDictCursor。无意味着使用Cursor。
open
如果连接打开，则返回True

ping（reconnect = True ）
检查服务器是否处于活动状态。

参数：	重新连接 - 如果连接已关闭，请重新连接。
举：	错误 - 如果连接已关闭且重新连接= False。
rollback（）
回滚当前事务。

请参阅 规范中的Connection.rollback（）。

select_db（db ）
设置当前数据库。

参数：	db - 数据库的名称。
show_warnings（）
发送“SHOW WARNINGS”SQL命令。


class pymysql.cursors.Cursor（connection）
execute（query，args = None ）
执行查询

参数：	
query（str） - 要执行的查询。
args（元组，列表或字典） - 与查询一起使用的参数。（可选的）
返回：	
受影响的行数

返回类型：	
INT

#字段名需要反引号


executemany（查询，args ）
针对一个查询运行多个数据

参数：	
query - 要在服务器上执行的查询
args - 序列或映射的序列。它用作参数。
返回：	
受影响的行数（如果有）

fetchall（）
获取所有行

fetchone ()
获取一行


class pymysql.cursors.SSCursor(connection)

close（）
关闭光标会耗尽所有剩余数据。

fetchall（）
根据MySQLdb获取所有内容。对于大型查询来说，它是无用的，因为它是缓冲的。如果您想要此方法的无缓冲生成器版本，请参阅fetchall_unbuffered（）。

fetchall_unbuffered（）
获取所有，实现为生成器，这不是标准的，但是，返回列表中的所有内容是没有意义的，因为这会对大型结果集使用荒谬的内存。

fetchmany（size = None ）
取很多

fetchone（）
获取下一行

read_next（）
阅读下一行

class pymysql.cursors.DictCursor（连接）
将结果作为字典返回的游标

class pymysql.cursors.SSDictCursor（连接）
一个无缓冲的游标，它将结果作为字典返回
